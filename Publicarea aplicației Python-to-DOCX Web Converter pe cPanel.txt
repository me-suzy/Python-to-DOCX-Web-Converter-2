# Publicarea aplicației Python-to-DOCX Web Converter pe cPanelDacă aveți acces la un server cu cPanel, puteți publica aplicația Flask urmând acești pași:## Pași pentru a publica aplicația pe cPanel### 1. Verificați suportul Python pe cPanel- Verificați dacă hosting-ul dvs. cPanel oferă suport pentru Python (majoritatea versiunilor recente oferă)- Verificați versiunea Python disponibilă (de preferat Python 3.7+)- Accesați secțiunea "Software" sau "Setup Python App" din cPanel### 2. Setați aplicația Python în cPanel1. **Accesați cPanel** și găsiți secțiunea "Setup Python App" sau "Software/Python"2. **Creați o nouă aplicație Python**:   - Alegeți calea pentru aplicație (de obicei sub domeniul dvs., ex: `public_html/python_docx`)   - Selectați versiunea Python (preferabil 3.7+)   - Setați calea către scriptul de start (`app.py`)   - Setați URL-ul aplicației (ex: `yourdomain.com/python_docx` sau un subdomeniu)   - Aplicația va fi accesibilă la URL-ul configurat### 3. Creați și configurați mediul virtual1. **Conectați-vă prin SSH** la serverul dvs. cPanel (dacă aveți acces SSH) sau folosiți "Terminal" din cPanel2. **Navigați la directorul aplicației** și creați un mediu virtual:   ```bash   cd ~/public_html/python_docx   python3 -m venv venv   source venv/bin/activate   ```3. **Instalați dependențele**:   ```bash   pip install flask python-docx   ```### 4. Pregătiți fișierele aplicației1. **Încărcați fișierele aplicației** folosind File Manager din cPanel sau FTP:   - Creați directorul `public_html/python_docx` (sau calea configurată)   - Încărcați fișierul `app.py`   - Creați directorul `templates` și încărcați `index.html` în acesta2. **Creați un fișier `passenger_wsgi.py`** (necesar pentru hosting-ul cPanel cu Passenger):   ```python   import sys   import os   # Adăugați calea aplicației la sys.path   sys.path.insert(0, os.path.dirname(__file__))   # Importați aplicația Flask   from app import app as application   ```3. **Modificați `app.py`** pentru a funcționa corect în mediul cPanel:   ```python   # La finalul fișierului app.py   if __name__ == '__main__':       # Pentru testare locală       app.run(debug=True, port=5001)   else:       # Pentru producție cu cPanel/Passenger       application = app  # Necesar pentru WSGI   ```### 5. Configurați `.htaccess`Creați un fișier `.htaccess` în directorul aplicației cu următorul conținut:```# Activează modulul rewriteRewriteEngine On# Ignoră fișierele staticeRewriteCond %{REQUEST_URI} !^/static/.*$# Redirecționează toate cererile către aplicația PythonRewriteRule ^(.*)$ /passenger_wsgi.py/$1 [QSA,L]```### 6. Creați fișierul `requirements.txt`Creați un fișier `requirements.txt` cu dependențele aplicației:```flask==2.0.1python-docx==0.8.11```### 7. Reporniți aplicația Python- Din cPanel, găsiți aplicația Python configurată- Apăsați butonul "Restart" sau "Restart Application"### Configurarea unui subdomeniu (opțional, dar recomandat)Pentru o experiență mai bună, puteți configura un subdomeniu dedicat:1. Din cPanel, accesați "Subdomains"2. Creați un subdomeniu nou (ex: `python-docx.yourdomain.com`)3. Setați directorul subdomeniu la calea aplicației (ex: `public_html/python_docx`)4. Actualizați configurarea aplicației Python pentru a folosi acest subdomeniu## Soluții pentru probleme comune pe cPanel### Problema: Erori "500 Internal Server Error"**Soluție**: Verificați jurnalele de erori:1. Din cPanel, accesați "Error Log"2. Sau verificați fișierul error_log din directorul aplicației### Problema: Modulele Python lipsesc**Soluție**: Asigurați-vă că instalați toate dependențele în mediul virtual corect:```bashsource ~/public_html/python_docx/venv/bin/activatepip install -r requirements.txt```### Problema: Permisiuni de fișiere**Soluție**: Verificați și ajustați permisiunile:```bashchmod 755 ~/public_html/python_docxchmod 755 ~/public_html/python_docx/passenger_wsgi.pychmod 755 ~/public_html/python_docx/app.py```## Considerații de securitate pentru cPanel1. **Activați HTTPS** pentru domeniu/subdomeniu din secțiunea SSL/TLS din cPanel2. **Limitați permisiunile fișierelor**:   - Fișiere Python: 644 (rw-r--r--)   - Directoare: 755 (rwxr-xr-x)   - Fișiere executabile: 755 (rwxr-xr-x)3. **Implementați protecție împotriva execuției de cod malițios**:   - Adăugați validare pentru codul introdus   - Limitați bibliotecile care pot fi importate   - Implementați timeout pentru execuția codului4. **Adăugați protecție cu parolă** folosind autentificare HTTP Basic:   - Creați un fișier `.htpasswd` prin cPanel   - Configurați `.htaccess` pentru a solicita autentificare## Notă finalăGăzduirea unei aplicații Flask pe cPanel poate fi mai complexă decât pe o platformă specializată pentru Python. Această implementare va funcționa pentru majoritatea cazurilor, dar este posibil să fie necesare ajustări suplimentare în funcție de configurația specifică a serverului dvs. cPanel.Aplicațiile care execută cod Python furnizat de utilizatori reprezintă un risc de securitate semnificativ. Asigurați-vă că implementați măsuri adecvate de securitate și izolare înainte de a expune aplicația publicului.